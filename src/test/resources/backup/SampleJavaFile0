
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;
import javax.validation.constraints.*;

import java.io.Serializable;
import java.util.Objects;
import java.math.BigDecimal;
import java.time.Instant;

import com.looseboxes.webstore.domain.enumeration.AccountType;

import com.looseboxes.webstore.domain.enumeration.Currency;

/**
 * A AccountDetails.
 */
@Entity
@Table(name = "account_details")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class AccountDetails implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(name = "type", nullable = false)
    private AccountType type;

    @NotNull
    @Size(max = 128)
    @Column(name = "account_name", length = 128, nullable = false)
    private String accountName;

    @Size(max = 10)
    @Column(name = "account_number", length = 10)
    private String accountNumber;

    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(name = "currency", nullable = false)
    private Currency currency;

    @NotNull
    @Column(name = "current_balance", precision = 21, scale = 2, nullable = false)
    private BigDecimal currentBalance;

    @NotNull
    @Column(name = "current_balance_time", nullable = false)
    private Instant currentBalanceTime;

    @NotNull
    @Column(name = "primary_account", nullable = false)
    private Boolean primaryAccount;

    @NotNull
    @Column(name = "time_created", nullable = false)
    private Instant timeCreated;

    @NotNull
    @Column(name = "time_modified", nullable = false)
    private Instant timeModified;

    @NotNull
    @Column(name = "time_deleted_unix", nullable = false)
    private Long timeDeletedUnix;

    @ManyToOne(optional = false)
    @NotNull
    @JsonIgnoreProperties("accountDetails")
    private UserInfo owner;

    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public AccountType getType() {
        return type;
    }

    public AccountDetails type(AccountType type) {
        this.type = type;
        return this;
    }

    public void setType(AccountType type) {
        this.type = type;
    }

    public String getAccountName() {
        return accountName;
    }

    public AccountDetails accountName(String accountName) {
        this.accountName = accountName;
        return this;
    }

    public void setAccountName(String accountName) {
        this.accountName = accountName;
    }

    public String getAccountNumber() {
        return accountNumber;
    }

    public AccountDetails accountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
        return this;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    public Currency getCurrency() {
        return currency;
    }

    public AccountDetails currency(Currency currency) {
        this.currency = currency;
        return this;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    public BigDecimal getCurrentBalance() {
        return currentBalance;
    }

    public AccountDetails currentBalance(BigDecimal currentBalance) {
        this.currentBalance = currentBalance;
        return this;
    }

    public void setCurrentBalance(BigDecimal currentBalance) {
        this.currentBalance = currentBalance;
    }

    public Instant getCurrentBalanceTime() {
        return currentBalanceTime;
    }

    public AccountDetails currentBalanceTime(Instant currentBalanceTime) {
        this.currentBalanceTime = currentBalanceTime;
        return this;
    }

    public void setCurrentBalanceTime(Instant currentBalanceTime) {
        this.currentBalanceTime = currentBalanceTime;
    }

    public Boolean isPrimaryAccount() {
        return primaryAccount;
    }

    public AccountDetails primaryAccount(Boolean primaryAccount) {
        this.primaryAccount = primaryAccount;
        return this;
    }

    public void setPrimaryAccount(Boolean primaryAccount) {
        this.primaryAccount = primaryAccount;
    }

    public Instant getTimeCreated() {
        return timeCreated;
    }

    public AccountDetails timeCreated(Instant timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }

    public void setTimeCreated(Instant timeCreated) {
        this.timeCreated = timeCreated;
    }

    public Instant getTimeModified() {
        return timeModified;
    }

    public AccountDetails timeModified(Instant timeModified) {
        this.timeModified = timeModified;
        return this;
    }

    public void setTimeModified(Instant timeModified) {
        this.timeModified = timeModified;
    }

    public Long getTimeDeletedUnix() {
        return timeDeletedUnix;
    }

    public AccountDetails timeDeletedUnix(Long timeDeletedUnix) {
        this.timeDeletedUnix = timeDeletedUnix;
        return this;
    }

    public void setTimeDeletedUnix(Long timeDeletedUnix) {
        this.timeDeletedUnix = timeDeletedUnix;
    }

    public UserInfo getOwner() {
        return owner;
    }

    public AccountDetails owner(UserInfo userInfo) {
        this.owner = userInfo;
        return this;
    }

    public void setOwner(UserInfo userInfo) {
        this.owner = userInfo;
    }
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof AccountDetails)) {
            return false;
        }
        return id != null && id.equals(((AccountDetails) o).id);
    }

    @Override
    public int hashCode() {
        return 31;
    }

    @Override
    public String toString() {
        return "AccountDetails{" +
            "id=" + getId() +
            ", type='" + getType() + "'" +
            ", accountName='" + getAccountName() + "'" +
            ", accountNumber='" + getAccountNumber() + "'" +
            ", currency='" + getCurrency() + "'" +
            ", currentBalance=" + getCurrentBalance() +
            ", currentBalanceTime='" + getCurrentBalanceTime() + "'" +
            ", primaryAccount='" + isPrimaryAccount() + "'" +
            ", timeCreated='" + getTimeCreated() + "'" +
            ", timeModified='" + getTimeModified() + "'" +
            ", timeDeletedUnix=" + getTimeDeletedUnix() +
            "}";
    }
}
