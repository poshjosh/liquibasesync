
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

import javax.persistence.*;
import javax.validation.constraints.*;

import java.io.Serializable;
import java.util.Objects;
import java.time.Instant;

import com.looseboxes.webstore.domain.enumeration.Country;

import com.looseboxes.webstore.domain.enumeration.Currency;

/**
 * A CountryDetails.
 */
@Entity
@Table(name = "country_details")
@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
public class CountryDetails implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(name = "country", nullable = false, unique = true)
    private Country country;

    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(name = "currency", nullable = false, unique = true)
    private Currency currency;

    @NotNull
    @Size(max = 2)
    @Column(name = "iso_2_code", length = 2, nullable = false, unique = true)
    private String iso2Code;

    @NotNull
    @Size(max = 3)
    @Column(name = "iso_3_code", length = 3, nullable = false, unique = true)
    private String iso3Code;

    @NotNull
    @Column(name = "time_created", nullable = false)
    private Instant timeCreated;

    @NotNull
    @Column(name = "time_modified", nullable = false)
    private Instant timeModified;

    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Country getCountry() {
        return country;
    }

    public CountryDetails country(Country country) {
        this.country = country;
        return this;
    }

    public void setCountry(Country country) {
        this.country = country;
    }

    public Currency getCurrency() {
        return currency;
    }

    public CountryDetails currency(Currency currency) {
        this.currency = currency;
        return this;
    }

    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    public String getIso2Code() {
        return iso2Code;
    }

    public CountryDetails iso2Code(String iso2Code) {
        this.iso2Code = iso2Code;
        return this;
    }

    public void setIso2Code(String iso2Code) {
        this.iso2Code = iso2Code;
    }

    public String getIso3Code() {
        return iso3Code;
    }

    public CountryDetails iso3Code(String iso3Code) {
        this.iso3Code = iso3Code;
        return this;
    }

    public void setIso3Code(String iso3Code) {
        this.iso3Code = iso3Code;
    }

    public Instant getTimeCreated() {
        return timeCreated;
    }

    public CountryDetails timeCreated(Instant timeCreated) {
        this.timeCreated = timeCreated;
        return this;
    }

    public void setTimeCreated(Instant timeCreated) {
        this.timeCreated = timeCreated;
    }

    public Instant getTimeModified() {
        return timeModified;
    }

    public CountryDetails timeModified(Instant timeModified) {
        this.timeModified = timeModified;
        return this;
    }

    public void setTimeModified(Instant timeModified) {
        this.timeModified = timeModified;
    }
    // jhipster-needle-entity-add-getters-setters - JHipster will add getters and setters here, do not remove

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof CountryDetails)) {
            return false;
        }
        return id != null && id.equals(((CountryDetails) o).id);
    }

    @Override
    public int hashCode() {
        return 31;
    }

    @Override
    public String toString() {
        return "CountryDetails{" +
            "id=" + getId() +
            ", country='" + getCountry() + "'" +
            ", currency='" + getCurrency() + "'" +
            ", iso2Code='" + getIso2Code() + "'" +
            ", iso3Code='" + getIso3Code() + "'" +
            ", timeCreated='" + getTimeCreated() + "'" +
            ", timeModified='" + getTimeModified() + "'" +
            "}";
    }
}
